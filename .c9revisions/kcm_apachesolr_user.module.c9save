{"ts":1348584680865,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"<?php\n// $Id$\n\n/**\n * @file\n *   Indexer for the user entities for the Apachesolr module.\n */\n\nfunction kcm_apachesolr_user_apachesolr_entity_info_alter(&$entity_info) {\n  $entity_info['user']['indexable'] = TRUE;\n  $entity_info['user']['status callback'][] = 'kcm_apachesolr_user_status_callback';\n  $entity_info['user']['document callback'][] = 'kcm_apachesolr_index_user_solr_document';\n  $entity_info['user']['reindex callback'] = 'kcm_apachesolr_user_solr_reindex';\n  $entity_info['user']['index_table'] = 'kcm_apachesolr_index_entities_user';\n  //$entity_info['node']['cron_check'] = 'apachesolr_index_user_check_table';\n  $entity_info['user']['result callback'] = 'kcm_apachesolr_user_result';\n}\n\n/**\n * Status callback for ApacheSolr, for users.\n */\nfunction kcm_apachesolr_user_status_callbackapachesolr_user_status_callback($user, $type) {\n  return $user->status;\n}\n\n/**\n * Builds the user-specific information for a Solr document.\n *\n * @param ApacheSolrDocument $document\n *   The Solr document we are building up.\n * @param stdClass $entity\n *   The entity we are indexing.\n * @param string $entity_type\n *   The type of entity we're dealing with.\n */\nfunction kcm_apachesolr_index_user_solr_document(ApacheSolrDocument $document, $account, $entity_type) {\n\n  $document->uid = $account->uid;\n\n  // Title is a required field.\n  $document->label = apachesolr_clean_text(format_username($account));\n\n  $document->mail = $account->mail;\n  $document->signature = $account->signature;\n\n  // Note the conspicuous lack of password hash. :-)\n\n  // Build the user body.\n  $build = user_view($account, 'search_index');\n  // Why do we need this?\n  unset($build['#theme']);\n  $text = drupal_render($build);\n\n  $document->content = apachesolr_clean_text($text);\n\n  $document->bs_status = $account->status;\n  $document->created = apachesolr_date_iso($account->created);\n  $document->access = apachesolr_date_iso($account->access);\n\n  $document->im_rids = array_keys($account->roles);\n  //  Generic usecase for future reference. Callbacks can\n  //  allow you to send back multiple documents\n  $documents = array();\n  $documents[] = $document;\n  return $documents;\n}\n\n/**\n * Reindexing callback for ApacheSolr, for users.\n */\nfunction kcm_apachesolr_user_solr_reindex() {\n  $indexer_table = apachesolr_get_indexer_table('user');\n  $transaction = db_transaction();\n  $env_id = apachesolr_default_environment();\n  try {\n    db_delete($indexer_table)\n      ->condition('entity_type', 'user')\n      ->execute();\n\n    // We know there's only one bundle type, so if that doesn't get indexed just\n    // skip this entirely.\n    if (apachesolr_get_index_bundles($env_id, 'user')) {\n      $select = db_select('users', 'u');\n      $select->addExpression(\"'user'\", 'entity_type');\n      $select->addExpression(\"'user'\", 'bundle');\n      $select->addField('u', 'uid', 'entity_id');\n      $select->addField('u', 'status', 'status');\n      $select->addExpression(REQUEST_TIME, 'changed');\n\n      $insert = db_insert($indexer_table)\n        ->fields(array('entity_id', 'status', 'entity_type', 'bundle', 'changed'))\n        ->from($select)\n        ->execute();\n    }\n  }\n  catch (Exception $e) {\n    $transaction->rollback();\n    drupal_set_message($e->getMessage(), 'error');\n    watchdog_exception('Apache Solr', $e);\n    return FALSE;\n  }\n\n  return TRUE;\n}\n\n/**\n * Implements hook_search_execute().\n * @param $keys\n *   The keys that are available after the path that is defined in\n *   hook_search_info\n * @param $conditions\n *   Conditions that are coming from apachesolr_search_conditions\n */\nfunction kcm_apachesolr_user_search_execute($keys = NULL, $conditions = NULL) {\n  $search_page = apachesolr_search_page_load('core_search');\n  $results = apachesolr_search_search_results($keys, $conditions, $search_page);\n  return $results;\n}\n\n/**\n * Callback function for user search results.\n *\n * @param stdClass $doc\n *   The result document from Apache Solr.\n * @param array $result\n *   The result array for this record to which to add.\n */\nfunction kcm_apachesolr_user_result($doc, &$result, &$extra) {\n  //not good performance, but the results look good.\n  $user = user_load($doc->entity_id);\n  $user_profile = user_view($user, 'search_result');\n  $result['snippet'] = drupal_render($user_profile);\n}\n\n/**\n * Implements hook_apachesolr_index_document_build_entity()\n */\nfunction kcm_apachesolr_user_apachesolr_index_document_build_user(ApacheSolrDocument $document, $user, $env_id) {\n  $document->setMultiValue('access__user', 1);\n}\n\n/**\n * Implements hook_apachesolr_query_alter().\n */\nfunction kcm_apachesolr_user_apachesolr_query_alter(DrupalSolrQueryInterface $query) {\n  if ($query->getName() == 'apachesolr') {\n  }\n  elseif ($query->getName() == 'apachesolr_mlt') {\n    // Exclude files from MLT results.\n    $query->addFilter('entity_type', 'user', TRUE);\n  }\n\n  if (module_exists('apachesolr_access') && user_access('access user profiles')) {\n    $qs =& $query->getFilterSubQueries();\n    $q = array_shift($qs);\n    $q->addFilter('access__user', TRUE);\n    $subquery = apachesolr_drupal_subquery();\n    $subquery->addFilter('access__user', TRUE);\n    $query->addFilterSubQuery($q, 'OR');\n  }\n}\n\nfunction kcm_apachesolr_user_facetapi_searcher_info_alter(array &$searcher_info) {\n  foreach ($searcher_info as $index => $info) {\n    $searcher_info[$index]['types'][] = 'user';\n  }\n}\n\n/**\n * Implements hook_facetapi_facet_info().\n */\nfunction kcm_apachesolr_user_facetapi_facet_info($searcher_info) {\n  $facets = array();\n  if (isset($searcher_info['types']['user'])) {\n    $facets['rid'] = array(\n      'label' => t('Role'),\n      'description' => t('Filter by user role.'),\n      'field' => 'im_rids',\n      'map callback' => 'user_roles',\n      'values callback' => 'facetapi_callback_user_values',\n      'facet mincount allowed' => TRUE,\n      'dependency plugins' => array('bundle', 'role'),\n    );\n\n    // Add facets for all fields attached to the user entity. \n    //$facets = array_merge($facets, apachesolr_entity_field_facets('user'));\n  }\n  return $facets;\n}\n"]],"start1":0,"start2":0,"length1":0,"length2":6063}]],"length":6063}
